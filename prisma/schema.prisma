generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model api {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String              @db.VarChar(255)
  format            String              @db.VarChar(255)
  organization_id   String              @db.Uuid
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  organization      organization        @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ci_cd_integration ci_cd_integration[]
  test_run          test_run[]
}

model ci_cd_integration {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String   @db.VarChar(255)
  api_id           String   @db.Uuid
  user_id          String   @db.Uuid
  integration_type String   @db.VarChar(255)
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  api              api      @relation(fields: [api_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  api         api[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model test_result {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  test_run_id   String   @db.Uuid
  vulnerability String   @db.VarChar(255)
  severity      String   @db.VarChar(255)
  description   String?  @db.VarChar(255)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  test_run      test_run @relation(fields: [test_run_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model test_run {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  api_id      String        @db.Uuid
  user_id     String        @db.Uuid
  start_time  DateTime      @default(now()) @db.Timestamp(6)
  end_time    DateTime?     @db.Timestamp(6)
  status      String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  test_result test_result[]
  api         api           @relation(fields: [api_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String              @unique @db.VarChar(255)
  firstName         String?             @db.VarChar(255)
  lastName          String?             @db.VarChar(255)
  roq_user_id       String              @db.VarChar(255)
  tenant_id         String              @db.VarChar(255)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  ci_cd_integration ci_cd_integration[]
  organization      organization[]
  test_run          test_run[]
}
